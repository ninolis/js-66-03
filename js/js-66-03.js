'use strict';

// let a = 5;
// let b = a;

// console.log(a, b);

// a = 8;
// console.log(a, b);

// const arr = [1, 2, 3];
// const arr2 = arr;

// console.log(arr, arr2);
// console.log(arr === arr2);

// console.log();

// arr[0] = 55;

// console.log(arr, arr2);
// console.log(arr === arr2);

// const arr3 = [55, 2, 3];

// console.log(arr, arr3);
// console.log(arr === arr3);

// const arr4 = Array.from(arr);
// console.log(arr, arr4);
// console.log(arr === arr4);

// The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.

// Syntax

// slice()
// slice(start)
// slice(start, end)

// Return a portion of an existing array

// const fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango', 'Grapes'];
// const citrus = fruits.slice(1, 3);

// fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']
// citrus contains ['Orange','Lemon']
// const citrus2 = fruits.slice(); // copy whole array
// console.log(citrus2);
// const citrus3 = fruits.slice(-1); // copy last element of array
// console.log(citrus3);

// const citrus4 = fruits.slice(-2); // copy last two elements of array
// console.log(citrus4);

// const citrus5 = fruits.slice(1, -2); // copy from index 1 till end -2
// console.log(citrus5);
/////////////////////////////////////////////////
/*
const arr = [1, 2, , 4, , 6];
// console.log(arr);
// console.log(arr.indexOf(''));// -1
// console.log(arr[2]);// undefined
// console.log(arr.indexOf(undefined));// -1
// console.log(arr[2]); // undefined

//! = = = = = = = = = = = = = = = = = = =
find indexes of empty element (which is undefined) in array arr
const emptyEl = [];
for (let i = 0; i < arr.length; i += 1) {
  // console.log(arr[i]);
  if (typeof arr[i] === 'undefined') {
    emptyEl.push(i);
  }
}

console.log(emptyEl);
*/

//! = = = = = = = = = = = = = = = = = = =
/*
–ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 3. –ú–∞—Å–∏–≤–∏
Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º
–°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª —Ç–∞ ¬´Blues¬ª.
–î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è.
–í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
–í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
–í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
–í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.
const genres = ;
*/
/*
const genres = ['Jazz', 'Blues'];
genres.push('Rock-n-Roll');
console.log(genres[0]);
const genresLength = genres.length - 1;
console.log(genres[genresLength]);
console.log(genres.shift());
console.log(genres);
or using splice
console.log(genres.splice(0, 1)[0]); // splice returns (from position, number of elements), this new array from which we need first el - index[0]
genres.unshift('Country', 'Reggae');
console.log(genres);

OR using splice
Syntax
splice(start)
splice(start, deleteCount)
splice(start, deleteCount, item1)
splice(start, deleteCount, item1, item2, itemN) // items to insert item1, item2, itemN

console.log(genres.splice(0, 1, 'Country', 'Reggae')[0]); // splice returns (from position, number of elements), this new array from which we need first el - index[0]


*/

/////////////////////////////////////////////////
/*
Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

const values = '8 11';

*/
// const values = '8 11';
// const numbers = values.split(' ');
// const rectangualarSquare = numbers[0] * numbers[1];
// console.log(rectangualarSquare);

/////////////////////////////////////////////////
/*
Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

*/

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let i = 0; i < fruits.length; i += 1) {
//   console.log(`${i + 1}: ${fruits[i]}`);
// }

/////////////////////////////////////////////////
/*
Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

const names = 'Jacob,William,Solomon,Artemis';
const phones = '89001234567,89001112233,890055566377,890055566300';

*/

// const names = 'Jacob,William,Solomon,Artemis';
// const phones = '89001234567,89001112233,890055566377,890055566300';

// const splittedNames = names.split(',');
// const splittedPhones = phones.split(',');

// for (let i = 0; i < splittedNames.length; i += 1) {
//   console.log(`${i + 1}. ${splittedNames[i]}: ${splittedPhones[i]}.`);
// }

/////////////////////////////////////////////////
/*
Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

const string = 'Welcome to the future';

*/

// const string = 'Welcome to the future nino lis from Kyiv Welcome';

// const words = string.split(' ');
// console.log(words.slice(1, -1).join(' '));

/////////////////////////////////////////////////
/*
Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.

const string = 'Welcome to the future';

*/

// const string = 'Welcome to the future nino lis from Kyiv Pryvit';

// const letters = string.split('');
// const reverseLetters = [];
// let reverseString;

// // console.log(letters);

// for (let i = letters.length - 1; i >= 0; i -= 1) {
//   reverseLetters.push(letters[i]);
// }
// console.log(reverseLetters.join(''));

/////////////////////////////////////////////////
/*
Example 7 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —ñ–∑ —Ü–∏–∫–ª–æ–º
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Ä—è–¥–∫—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é –µ–ª–µ–º–µ–Ω—Ç–∞.

const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];

*/
/*
const string = 'Welcome to the future nino lis from Kyiv Pryvit';
const string2 = '!erutuf eht ot emocleW .sil oninl morf viyK tivyrP';
console.log(string2);
const letters = string.split('');
const reverseLetters = [];
let reverseString;

const letters2 = string2.split('');
const reverseLetters2 = [];
let reverseString2;
console.log(letters2);

console.log(letters);

for (let i = letters.length - 1; i >= 0; i -= 1) {
  reverseLetters.push(letters[i]);
}
console.log(reverseLetters.join(''));

for (let i = letters2.length - 1; i >= 0; i -= 1) {
  reverseLetters2.push(letters2[i]);
}
console.log(reverseLetters2.join(''));
*/

/////////////////////////////////////////////////
/*
Example 8 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.

const numbers = [2, 17, 94, 1, 23, 37];
let min;

console.log(min); // 1
*/
// const numbers = [2, 17, 94, 1, 23, 37];
// let min;
// min = 100000000;

// for (let j = 0; j < numbers.length - 1; j += 1) {
//   // console.log(min);
//   if (numbers[j] < min) {
//     // console.log(numbers[j]);
//     min = numbers[j];
//   }
//   // console.log(min);
// }
// console.log(min); // 1

//! =============================================
// *** Lesson 2-2 18-11-2022 –û–ª–µ–∫—Å—ñ–π –°—ñ–º–∞–∫

/////////////////////////////////////////////////
/*
** timeline 8:59

–©–æ –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å?
function foo(array) {
// for (let j = 0; j < array.length; j += 1) {
//   array[j] *= 2;
// }
const numbers = [1, 2, 3, 4, 5];
foo(numbers);
console.log(numbers); // 1
*/
// function foo(array) {
//   for (let j = 0; j < array.length; j += 1) {
//     array[j] *= 2;
//   }
// }

// const numbers = [1, 2, 3, 4, 5];

// foo(numbers);
// console.log(numbers); // [2, 4, 6, 8, 10]

/////////////////////////////////////////////////
/*

** timeline 10:15
–©–æ –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å?

greet()

const greet = function()  {
  console.log("Welcome")
}
*/

// greet(); // Welcome

// const greet = function () {
//   console.log('Welcome');
// };
// Uncaught ReferenceError: Cannot access 'greet' before initialization

// greet2(); // Welcome

// function greet2() {
//   console.log('Welcome');
// }
// Welcome

/////////////////////////////////////////////////
/*

** timeline 12:37
–©–æ –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å?

greet()

function greet()  {
  console.log("Welcome")
}
*/

// greet(); // Welcome

// function greet() {
//   console.log('Welcome');
// }
// Welcome;

/////////////////////////////////////////////////
/*

** timeline 13:28
–©–æ –º—ñ—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ arguments —É —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó?


function foo ()  {
  console.log(arguments)
}
*/

// –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤;

/////////////////////////////////////////////////
/*

** timeline 14:43
–©–æ –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å?

function foo ()  {
  console.log(arguments)
}
*/
// –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤;
// function foo() {
//   console.log(arguments);
// }

// foo(5, 'Mango', true); // [5, 'Mango', true] –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤;

/////////////////////////////////////////////////
/*
** timeline 15:42
–ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ —Ü–µ ... ?

*/
// –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ü–µ —Ç–∞–∫–∏–π –∂–µ —ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —è–∫ –º–∞—Å–∏–≤, –∞–ª–µ –±–µ–∑ –π–æ–≥–æ –º–µ—Ç–æ–¥—ñ–≤;

/////////////////////////////////////////////////
/*
** timeline 16:25
–©–æ –¥–æ—Å—Ç—É–ø–Ω–µ –≤ –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó?

*/
// –ù–∞–±—ñ—Ä –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö;

/////////////////////////////////////////////////
/*
** timeline 17:52
–ó–∞ —è–∫–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–º –ø—Ä–∞—Ü—é—î —Å—Ç–µ–∫ –≤–∏–∫–ª–∏–∫—ñ–≤?

*/
// Last in, first out;

/////////////////////////////////////////////////
/*
** timeline 22:43
–ó–∞ —è–∫–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–º –ø—Ä–∞—Ü—é—î return?
*/

// function foo(array) {
//   for (let j = 0; j < array.length; j += 1) {
//     array[j] *= 2;
//   }
//   // return array;// without return - undefined, with return - [2, 4, 6, 8, 10]
// }

// const numbers = [1, 2, 3, 4, 5];

// const newNumbers = foo(numbers);
// console.log(newNumbers); // undefined
// console.log(numbers); // [2, 4, 6, 8, 10]

/////////////////////////////////////////////////
/*
** timeline 29:30
early return
*/

// function add(a, b) {
//   a + b; // without return - undefined, and message from console.log()
//   return a + b; // with return - 6, and without message from console.log()
//   console.log("This message doesn't print on screen! after return!!!");
// }

// const result = add(1, 5);
// console.log(result);

/////////////////////////////////////////////////
/*
** timeline 29:30
early return
*/

// function add(a, b) {
//   a + b; // without return - undefined, and message from console.log()
//   return a + b; // with return - 6, and without message from console.log()
// }

// const result = add(1, 5);
// console.log(result);

/////////////////////////////////////////////////
// ** timeline 39:09

//! = = = = = = = = = = = = = = = = = = =
/*
–ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 4. –§—É–Ω–∫—Ü—ñ—ó
Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏. –î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.

–í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏. –ù–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24,7, —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.

–Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;

const bmi = calcBMI('88,3', '1.75');
console.log(bmi); // 28.8


*/
// It's better to write function to replace comma to dot
// const str = '88,3';
/*
const bmi = calcBMI('88,3', '1.75');
console.log(bmi); // 28.8

// teacher's function

function calcBMI(weight, height) {
  weight = replaceCommfToDot(weight);
  height = replaceCommfToDot(height);
  return getRoundedNumber(weight / height ** 2);
}

function replaceCommfToDot(string) {
  // under the hood: let string = "88,3"
  return string.replace(',', '.');
}

function getRoundedNumber(number) {
  return Number(number.toFixed(2));
}
*/

/* my function
function calcBMI(weight, height) {
  const numberWeight = parseFloat(weight.replace(',', '.'));
  const numberHeight = parseFloat(height.replace(',', '.'));
  // const h = Number(height);

  const result = (numberWeight / (numberHeight * numberHeight)).toFixed(1);
  // const result = numberWeight / (numberHeight * numberHeight);
  return result;
}
*/

// const bmi = calcBMI('88,3', '1.75');
// const w = Number(weight);
// const h = Number(height);
// console.log(w); // 28.8
// console.log(bmi); // 28.8
// console.log(Number('1.75')); // 28.8
// console.log(Number('88,3')); // 28.8

/////////////////////////////////////////////////
//! = = = = = = = = = = = = = = = = = = =
// ** timeline 1:30:31 –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö –ø–µ—Ä–µ–π—à–æ–≤ –ª–µ–∫—Ç–æ—Ä –¥–æ 6 –∑–∞–≤–¥–∞–Ω–Ω—è
/*
–ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 4. –§—É–Ω–∫—Ü—ñ—ó
Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª

–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a,b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.

console.log(min(2, 5)); // 2
console.log(min(3, -1)); // -1
console.log(min(1, 1)); // 1


*/
// function min(a, b) {
//   return a < b ? a : b;
// }
// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1

//! = = = = = = = = = = = = = = = = = = =
// ** timeline 1:30:31 –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö –ø–µ—Ä–µ–π—à–æ–≤ –ª–µ–∫—Ç–æ—Ä –¥–æ 6 –∑–∞–≤–¥–∞–Ω–Ω—è
/*
–ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 4. –§—É–Ω–∫—Ü—ñ—ó
Example 3 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞

–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

function getRectArea(dimensions) {}

console.log(getRectArea('8 11'));

*/
/*
function getRectArea(dimensions) {
  const sides = splitString(dimensions);
  return sides[0] * sides[1];
}

function splitString(string) {
  return string.split(' ');
}
// console.log(splitString('8 11', ' '));

console.log(getRectArea('8 11'));

//! = = = = = = = = = = = = = = = = = = =
// ** timeline 1:30:31 –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö –ø–µ—Ä–µ–π—à–æ–≤ –ª–µ–∫—Ç–æ—Ä –¥–æ 6 –∑–∞–≤–¥–∞–Ω–Ω—è
/*
–ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 4. –§—É–Ω–∫—Ü—ñ—ó
Example 4 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤

–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for, —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

–ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 - Ajax.

function logItems(items) {}

logItems(['Mango', 'Poly', 'Ajax']);
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);


// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let i = 0; i < fruits.length; i += 1) {
//   console.log(`${i + 1}: ${fruits[i]}`);
// }
*/
/*
function logItems(items) {
  for (let i = 0; i < items.length; i += 1) {
    // console.log(i);
    console.log(`${i + 1} - ${items[i]}`);
  }
}

logItems(['Mango', 'Poly', 'Ajax']);
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

*/

//! = = = = = = = = = = = = = = = = = = =
// ** timeline 1:30:31 –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö –ø–µ—Ä–µ–π—à–æ–≤ –ª–µ–∫—Ç–æ—Ä –¥–æ 6 –∑–∞–≤–¥–∞–Ω–Ω—è
/*
–ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 4. –§—É–Ω–∫—Ü—ñ—ó
Example 5 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤

–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printContactsInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ names —Ç–∞ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

function printContactsInfo(names, phones) {}

printContactsInfo(
  'Jacob,William,Solomon,Artemis',
  '89001234567,89001112233,890055566377,890055566300',
);

*/
/*
function printContactsInfo(names, phones) {
  // names = names.split(',');
  // phones = phones.split(',');
  names = splitString(names, ',');
  phones = splitString(phones, ',');
  for (let i = 0; i < names.length; i += 1) {
    // console.log(i);
    console.log(`${i + 1}. ${names[i]}: ${phones[i]}`);
  }
}

function splitString(str, splitter) {
  return str.split(splitter);
}

printContactsInfo(
  'Jacob,William,Solomon,Artemis',
  '89001234567,89001112233,890055566377,890055566300'
);

*/

//! = = = = = = = = = = = = = = = = = = =
// ** timeline 1:30:31 –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö –ø–µ—Ä–µ–π—à–æ–≤ –ª–µ–∫—Ç–æ—Ä –¥–æ 6 –∑–∞–≤–¥–∞–Ω–Ω—è
/*
–ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 4. –§—É–Ω–∫—Ü—ñ—ó
Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞

–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers)—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.

function findLargestNumber(numbers) {}

console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83


*/
/*
function findLargestNumber(numbers) {
  // let theLargestNumber = -1000000000;
  let theLargestNumber = numbers[0];

  for (let el = 0; el < numbers.length; el += 1) {
    // console.log(el);
    if (numbers[el] > theLargestNumber) {
      theLargestNumber = numbers[el];
    }
  }
  return theLargestNumber;
}
console.log(findLargestNumber([-100, -200, -3, 2, 17, 94, 1, 678, 23, 37])); // 94
console.log(
  findLargestNumber([-100, -200, -3, -2, -17, -94, -1, -678, -23, -37])
); // 94
console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83
*/
/*
// –ö—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü–∏–∫–ª for...of —Ç–æ–º—É —â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏
function findLargestNumber(numbers) {
  let max = numbers[0];

  for (const number of numbers) {
    if (number > max) {
      max = number;
    }
  }
  return max;
}

console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83

/*
function findSmallestNumber(numbers) {
  let theSmallestNumber = numbers[0];

  for (let el = 0; el < numbers.length; el += 1) {
    if (numbers[el] < theSmallestNumber) {
      theSmallestNumber = numbers[el];
    }
  }
  return theSmallestNumber;
}
*/
/*
// –ö—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü–∏–∫–ª for...of —Ç–æ–º—É —â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏
function findSmallestNumber(numbers) {
  let min = numbers[0];

  for (const number of numbers) {
    if (number < min) {
      min = number;
    }
  }
  return min;
}

console.log(findSmallestNumber([-100, -200, -3, 2, 17, 94, 1, 678, 23, 37])); // -200
console.log(findSmallestNumber([-100, -17, -94, -1, -678, -23, -2, 46, -37])); // -678
console.log(findSmallestNumber([49, 4, 7, 83, 12])); // 83

*/

// JS V2 block-3 Autochecking  ASSIGNMENT 00/41  Status: Done

/*
** THEORY


** TASK


** Test


 */

// Javascript Editor:
// START
/*

*/

// Javascript Editor:
// FINISH
/*

console.log(
*/

// RESULT
/*

*/
